"""initial schema

Revision ID: cbd6eaf0695b
Revises: 
Create Date: 2025-10-28 00:56:22.625806+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cbd6eaf0695b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    for extension in ("postgis", "age", "citext"):
        bind.exec_driver_sql(f"CREATE EXTENSION IF NOT EXISTS {extension}")
    bind = op.get_bind()
    status_enum = sa.Enum(name='statusenum')
    status_enum.drop(bind, checkfirst=True)
    operator_role_enum = sa.Enum(name='operatorrole')
    operator_role_enum.drop(bind, checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('operators',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'STAFF', name='operatorrole'), nullable=False),
    sa.Column('email', postgresql.CITEXT(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_operators'))
    )
    op.create_index(op.f('ix_operators_email'), 'operators', ['email'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', postgresql.CITEXT(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('oauth_provider', sa.String(), nullable=False),
    sa.Column('oauth_provider_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('oauth_provider_id', name=op.f('uq_users_oauth_provider_id'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('venues',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('coordinates', sa.String(), nullable=False),
    sa.Column('area', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('area_code', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('website', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('email', postgresql.CITEXT(), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('indoor', sa.Boolean(), nullable=True),
    sa.Column('outdoor', sa.Boolean(), nullable=True),
    sa.Column('parking_available', sa.Boolean(), nullable=True),
    sa.Column('wheelchair_accessible', sa.Boolean(), nullable=True),
    sa.Column('vip_area', sa.Boolean(), nullable=True),
    sa.Column('age_restriction', sa.Integer(), nullable=True),
    sa.Column('smoking_allowed', sa.Boolean(), nullable=True),
    sa.Column('alcohol_served', sa.Boolean(), nullable=True),
    sa.Column('food_served', sa.Boolean(), nullable=True),
    sa.Column('live_music', sa.Boolean(), nullable=True),
    sa.Column('dance_floor', sa.Boolean(), nullable=True),
    sa.Column('dress_code', sa.String(), nullable=True),
    sa.Column('opening_hours', sa.String(), nullable=True),
    sa.Column('tags', sa.String(), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('number_of_reviews', sa.Integer(), nullable=True),
    sa.Column('price_range', sa.String(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verified_by', sa.UUID(), nullable=True),
    sa.Column('experience_points', sa.Integer(), nullable=False),
    sa.Column('photo_url', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_venues'))
    )
    op.create_table('followers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', name='statusenum'), nullable=False),
    sa.Column('follower_id', sa.UUID(), nullable=False),
    sa.Column('followed_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], name=op.f('fk_followers_followed_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name=op.f('fk_followers_follower_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'follower_id', 'followed_id', name=op.f('pk_followers'))
    )
    op.create_table('footsteps',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('coordinates', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_footsteps_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_footsteps'))
    )
    op.create_index('ix_footsteps_created_at_desc', 'footsteps', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('operator_venues',
    sa.Column('operator_id', sa.UUID(), nullable=False),
    sa.Column('venue_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['operator_id'], ['operators.id'], name=op.f('fk_operator_venues_operator_id_operators'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['venue_id'], ['venues.id'], name=op.f('fk_operator_venues_venue_id_venues'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('operator_id', 'venue_id', name=op.f('pk_operator_venues'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('operator_venues')
    op.drop_index('ix_footsteps_created_at_desc', table_name='footsteps')
    op.drop_table('footsteps')
    op.drop_table('followers')
    op.drop_table('venues')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_operators_email'), table_name='operators')
    op.drop_table('operators')
    # ### end Alembic commands ###
    op.execute("DROP EXTENSION IF EXISTS age")
    op.execute("DROP EXTENSION IF EXISTS postgis")
    bind = op.get_bind()
    status_enum = sa.Enum(name='statusenum')
    status_enum.drop(bind, checkfirst=True)
    operator_role_enum = sa.Enum(name='operatorrole')
    operator_role_enum.drop(bind, checkfirst=True)  

