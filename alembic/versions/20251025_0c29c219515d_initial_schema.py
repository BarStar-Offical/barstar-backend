"""initial schema

Revision ID: 0c29c219515d
Revises: 
Create Date: 2025-10-25 17:06:46.163015+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0c29c219515d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('oauth_provider', sa.String(), nullable=False),
    sa.Column('oauth_provider_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('oauth_provider_id', name=op.f('uq_users_oauth_provider_id'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('venues',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_venues'))
    )
    op.create_table('friends',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('requester_id', sa.UUID(), nullable=False),
    sa.Column('accepter_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', name='statusenum'), nullable=False),
    sa.CheckConstraint('requester_id <> accepter_id', name=op.f('ck_friends_friends_no_self')),
    sa.ForeignKeyConstraint(['accepter_id'], ['users.id'], name=op.f('fk_friends_accepter_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name=op.f('fk_friends_requester_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('requester_id', 'accepter_id', name=op.f('pk_friends'))
    )
    op.create_index('uq_friends_unordered', 'friends', [sa.literal_column('least(requester_id, accepter_id)'), sa.literal_column('greatest(requester_id, accepter_id)')], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_friends_unordered', table_name='friends')
    op.drop_table('friends')
    op.drop_table('venues')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
