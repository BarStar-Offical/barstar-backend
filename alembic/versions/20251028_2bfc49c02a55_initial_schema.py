"""initial schema"""initial schema"""initial schema



Revision ID: 2bfc49c02a55

Revises:

Create Date: 2025-10-28 00:04:01.453212+00:00Revision ID: 2bfc49c02a55Revision ID: 2bfc49c02a55



"""Revises: Revises: 

from typing import Sequence, Union

Create Date: 2025-10-28 00:04:01.453212+00:00Create Date: 2025-10-28 00:04:01.453212+00:00

from alembic import op

import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

""""""



# revision identifiers, used by Alembic.from typing import Sequence, Unionfrom typing import Sequence, Union

revision: str = "2bfc49c02a55"

down_revision: Union[str, Sequence[str], None] = None

branch_labels: Union[str, Sequence[str], None] = None

depends_on: Union[str, Sequence[str], None] = Nonefrom alembic import opfrom alembic import op



import sqlalchemy as saimport sqlalchemy as sa

def upgrade() -> None:

    """Upgrade schema."""from sqlalchemy.dialects import postgresqlfrom sqlalchemy.dialects import postgresql

    bind = op.get_bind()

    for extension in ("postgis", "age", "citext"):

        bind.exec_driver_sql(f"CREATE EXTENSION IF NOT EXISTS {extension}")

# revision identifiers, used by Alembic.

    op.create_table(

        "operators",# revision identifiers, used by Alembic.revision: str = '2bfc49c02a55'

        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),

        sa.Column(revision: str = "2bfc49c02a55"down_revision: Union[str, Sequence[str], None] = None

            "created_at",

            sa.DateTime(timezone=True),down_revision: Union[str, Sequence[str], None] = Nonebranch_labels: Union[str, Sequence[str], None] = None

            nullable=False,

            server_default=sa.text("now()"),branch_labels: Union[str, Sequence[str], None] = Nonedepends_on: Union[str, Sequence[str], None] = None

        ),

        sa.Column(depends_on: Union[str, Sequence[str], None] = None

            "updated_at",

            sa.DateTime(timezone=True),def upgrade() -> None:

            nullable=False,

            server_default=sa.text("now()"),    """Upgrade schema."""

            server_onupdate=sa.text("now()"),

        ),def upgrade() -> None:    bind = op.get_bind()

        sa.Column(

            "role",    """Upgrade schema."""    for extension in ("postgis", "age", "citext"):

            sa.Enum("OWNER", "STAFF", name="operatorrole"),

            nullable=False,    bind = op.get_bind()        bind.exec_driver_sql(f"CREATE EXTENSION IF NOT EXISTS {extension}")

            server_default=sa.text("'STAFF'"),

        ),    for extension in ("postgis", "age", "citext"):    # ### commands auto generated by Alembic - please adjust! ###

        sa.Column("email", postgresql.CITEXT(), nullable=False),

        sa.Column("full_name", sa.String(length=255), nullable=False),        bind.exec_driver_sql(f"CREATE EXTENSION IF NOT EXISTS {extension}")    op.create_table('operators',

        sa.Column("phone_number", sa.String(), nullable=False),

        sa.Column(    sa.Column('id', sa.UUID(), nullable=False),

            "is_active",

            sa.Boolean(),    op.create_table(    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),

            nullable=False,

            server_default=sa.text("true"),        "operators",    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),

        ),

    )        sa.Column(    sa.Column('role', sa.Enum('OWNER', 'STAFF', name='operatorrole'), nullable=False),

    op.create_index(op.f("ix_operators_email"), "operators", ["email"], unique=True)

            "id",    sa.Column('email', postgresql.CITEXT(), nullable=False),

    op.create_table(

        "users",            postgresql.UUID(as_uuid=True),    sa.Column('full_name', sa.String(length=255), nullable=False),

        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),

        sa.Column("email", postgresql.CITEXT(), nullable=False),            primary_key=True,    sa.Column('phone_number', sa.String(), nullable=False),

        sa.Column("full_name", sa.String(), nullable=False, server_default=sa.text("''")),

        sa.Column(        ),    sa.Column('is_active', sa.Boolean(), nullable=False),

            "oauth_provider",

            sa.String(),        sa.Column(    sa.PrimaryKeyConstraint('id', name=op.f('pk_operators'))

            nullable=False,

            server_default=sa.text("'local'"),            op.create_table(

        ),                "operators",

        sa.Column("oauth_provider_id", sa.String(), nullable=False),                sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),

        sa.Column(                sa.Column(

            "created_at",                    "created_at",

            sa.DateTime(timezone=True),                    sa.DateTime(timezone=True),

            nullable=False,                    nullable=False,

            server_default=sa.text("now()"),                    server_default=sa.text("now()"),

        ),                ),

        sa.Column(                sa.Column(

            "updated_at",                    "updated_at",

            sa.DateTime(timezone=True),                    sa.DateTime(timezone=True),

            nullable=False,                    nullable=False,

            server_default=sa.text("now()"),                    server_default=sa.text("now()"),

            server_onupdate=sa.text("now()"),                    server_onupdate=sa.text("now()"),

        ),                ),

        sa.Column("points", sa.Integer(), nullable=False, server_default=sa.text("0")),                sa.Column(

        sa.UniqueConstraint("oauth_provider_id", name=op.f("uq_users_oauth_provider_id")),                    "role",

    )                    sa.Enum("OWNER", "STAFF", name="operatorrole"),

    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)                    nullable=False,

                    server_default=sa.text("'STAFF'"),

    op.create_table(                ),

        "venues",                sa.Column("email", postgresql.CITEXT(), nullable=False),

        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),                sa.Column("full_name", sa.String(length=255), nullable=False),

        sa.Column(                sa.Column("phone_number", sa.String(), nullable=False),

            "created_at",                sa.Column(

            sa.DateTime(timezone=True),                    "is_active",

            nullable=False,                    sa.Boolean(),

            server_default=sa.text("now()"),                    nullable=False,

        ),                    server_default=sa.text("true"),

        sa.Column(                ),

            "updated_at",            )

            sa.DateTime(timezone=True),        sa.Column("email", postgresql.CITEXT(), nullable=False),    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),

            nullable=False,

            server_default=sa.text("now()"),        sa.Column("full_name", sa.String(length=255), nullable=False),    sa.Column('coordinates', sa.String(), nullable=False),

            server_onupdate=sa.text("now()"),

        ),        sa.Column("phone_number", sa.String(), nullable=False),    sa.Column('area', sa.String(), nullable=True),

        sa.Column(

            "coordinates",        sa.Column(    sa.Column('name', sa.String(), nullable=False),

            sa.String(),

            nullable=False,            "is_active",    sa.Column('description', sa.String(), nullable=True),

            server_default=sa.text("'POINT(0 0)'"),

        ),            sa.Boolean(),    sa.Column('address', sa.String(), nullable=True),

        sa.Column(

            "area",            nullable=False,    sa.Column('city', sa.String(), nullable=True),

            sa.String(),

            nullable=True,            server_default=sa.text("true"),    sa.Column('state', sa.String(), nullable=True),

            server_default=sa.text("'POLYGON((0 0,0 0,0 0,0 0))'"),

        ),        ),    sa.Column('area_code', sa.String(), nullable=True),

        sa.Column("name", sa.String(), nullable=False),

        sa.Column("description", sa.String(), nullable=True),    )    sa.Column('country', sa.String(), nullable=True),

        sa.Column("address", sa.String(), nullable=True),

        sa.Column("city", sa.String(), nullable=True),    op.create_index(    sa.Column('website', sa.String(), nullable=True),

        sa.Column("state", sa.String(), nullable=True),

        sa.Column("area_code", sa.String(), nullable=True),        op.f("ix_operators_email"),    sa.Column('phone_number', sa.String(), nullable=True),

        sa.Column("country", sa.String(), nullable=True),

        sa.Column("website", sa.String(), nullable=True),        "operators",    sa.Column('email', postgresql.CITEXT(), nullable=True),

        sa.Column("phone_number", sa.String(), nullable=True),

        sa.Column("email", postgresql.CITEXT(), nullable=True),        ["email"],    sa.Column('capacity', sa.Integer(), nullable=True),

        sa.Column("capacity", sa.Integer(), nullable=True),

        sa.Column("indoor", sa.Boolean(), nullable=True),        unique=True,    sa.Column('indoor', sa.Boolean(), nullable=True),

        sa.Column("outdoor", sa.Boolean(), nullable=True),

        sa.Column("parking_available", sa.Boolean(), nullable=True),    )    sa.Column('outdoor', sa.Boolean(), nullable=True),

        sa.Column("wheelchair_accessible", sa.Boolean(), nullable=True),

        sa.Column("vip_area", sa.Boolean(), nullable=True),    sa.Column('parking_available', sa.Boolean(), nullable=True),

        sa.Column("age_restriction", sa.Integer(), nullable=True),

        sa.Column("smoking_allowed", sa.Boolean(), nullable=True),    op.create_table(    sa.Column('wheelchair_accessible', sa.Boolean(), nullable=True),

        sa.Column("alcohol_served", sa.Boolean(), nullable=True),

        sa.Column("food_served", sa.Boolean(), nullable=True),        "users",    sa.Column('vip_area', sa.Boolean(), nullable=True),

        sa.Column("live_music", sa.Boolean(), nullable=True),

        sa.Column("dance_floor", sa.Boolean(), nullable=True),        sa.Column(    sa.Column('age_restriction', sa.Integer(), nullable=True),

        sa.Column("dress_code", sa.String(), nullable=True),

        sa.Column("opening_hours", sa.String(), nullable=True),            "id",    sa.Column('smoking_allowed', sa.Boolean(), nullable=True),

        sa.Column("tags", sa.String(), nullable=True),

        sa.Column("rating", sa.Float(), nullable=True),            postgresql.UUID(as_uuid=True),    sa.Column('alcohol_served', sa.Boolean(), nullable=True),

        sa.Column("number_of_reviews", sa.Integer(), nullable=True),

        sa.Column("price_range", sa.String(), nullable=True),            primary_key=True,    sa.Column('food_served', sa.Boolean(), nullable=True),

        sa.Column("owner_id", postgresql.UUID(as_uuid=True), nullable=False),

        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.text("true")),        ),    op.drop_index(op.f('idx_tiger_featnames_lname'), table_name='featnames')

        sa.Column("is_verified", sa.Boolean(), nullable=True),

        sa.Column("verification_date", sa.DateTime(timezone=True), nullable=True),        sa.Column("email", postgresql.CITEXT(), nullable=False),    op.drop_index(op.f('idx_tiger_featnames_snd_name'), table_name='featnames')

        sa.Column("verified_by", postgresql.UUID(as_uuid=True), nullable=True),

        sa.Column("experience_points", sa.Integer(), nullable=False, server_default=sa.text("0")),        sa.Column("full_name", sa.String(), nullable=False, server_default=""),    op.drop_index(op.f('idx_tiger_featnames_tlid_statefp'), table_name='featnames')

        sa.Column("photo_url", sa.String(), nullable=True, server_default=sa.text("''")),

    )        sa.Column("oauth_provider", sa.String(), nullable=False, server_default="local"),    op.drop_table('featnames')



    op.create_table(        sa.Column("oauth_provider_id", sa.String(), nullable=False),    op.drop_table('pagc_rules')

        "followers",

        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),        sa.Column(    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),

        sa.Column(

            "created_at",            "created_at",    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=False),

            sa.DateTime(timezone=True),

            nullable=False,            sa.DateTime(timezone=True),    sa.Column('zcta5ce', sa.VARCHAR(length=5), autoincrement=False, nullable=False),

            server_default=sa.text("now()"),

        ),            nullable=False,    sa.Column('classfp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column(

            "updated_at",            server_default=sa.text("now()"),    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            sa.DateTime(timezone=True),

            nullable=False,        ),    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

            server_default=sa.text("now()"),

            server_onupdate=sa.text("now()"),        sa.Column(    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),

        ),

        sa.Column(            "updated_at",    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),

            "status",

            sa.Enum("PENDING", "ACCEPTED", "REJECTED", name="statusenum"),            sa.DateTime(timezone=True),    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),

            nullable=False,

            server_default=sa.text("'PENDING'"),            nullable=False,    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),

        ),

        sa.Column("follower_id", postgresql.UUID(as_uuid=True), nullable=False),            server_default=sa.text("now()"),    sa.Column('partflg', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.Column("followed_id", postgresql.UUID(as_uuid=True), nullable=False),

        sa.ForeignKeyConstraint(["followed_id"], ["users.id"], ondelete="CASCADE"),            onupdate=sa.text("now()"),    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),

        sa.ForeignKeyConstraint(["follower_id"], ["users.id"], ondelete="CASCADE"),

        sa.PrimaryKeyConstraint("id", "follower_id", "followed_id", name=op.f("pk_followers")),        ),    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),

    )

        sa.Column("points", sa.Integer(), nullable=False, server_default="0"),    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),

    op.create_table(

        "footsteps",        sa.UniqueConstraint("oauth_provider_id", name=op.f("uq_users_oauth_provider_id")),    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),

        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),

        sa.Column(    )    sa.PrimaryKeyConstraint('zcta5ce', 'statefp', name=op.f('pk_tiger_zcta5_zcta5ce')),

            "created_at",

            sa.DateTime(timezone=True),    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)    sa.UniqueConstraint('gid', name=op.f('uidx_tiger_zcta5_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False)

            nullable=False,

            server_default=sa.text("now()"),    )

        ),

        sa.Column(    op.create_table(    op.create_table('zip_state',

            "updated_at",

            sa.DateTime(timezone=True),        "venues",    sa.Column('zip', sa.VARCHAR(length=5), autoincrement=False, nullable=False),

            nullable=False,

            server_default=sa.text("now()"),        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),    sa.Column('stusps', sa.VARCHAR(length=2), autoincrement=False, nullable=False),

            server_onupdate=sa.text("now()"),

        ),        sa.Column(    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column("coordinates", sa.String(), nullable=False),

        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),            "created_at",    sa.PrimaryKeyConstraint('zip', 'stusps', name=op.f('zip_state_pkey'))

        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),

    )            sa.DateTime(timezone=True),    )

    op.create_index(

        "ix_footsteps_created_at_desc",            nullable=False,    op.create_table('state',

        "footsteps",

        [sa.text("created_at DESC")],            server_default=sa.text("now()"),    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),

    )

        ),    sa.Column('region', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    op.create_table(

        "operator_venues",        sa.Column(    sa.Column('division', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column("operator_id", postgresql.UUID(as_uuid=True), nullable=False),

        sa.Column("venue_id", postgresql.UUID(as_uuid=True), nullable=False),            "updated_at",    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=False),

        sa.ForeignKeyConstraint(["operator_id"], ["operators.id"], ondelete="CASCADE"),

        sa.ForeignKeyConstraint(["venue_id"], ["venues.id"], ondelete="CASCADE"),            sa.DateTime(timezone=True),    sa.Column('statens', sa.VARCHAR(length=8), autoincrement=False, nullable=True),

        sa.PrimaryKeyConstraint("operator_id", "venue_id", name=op.f("pk_operator_venues")),

    )            nullable=False,    sa.Column('stusps', sa.VARCHAR(length=2), autoincrement=False, nullable=False),



            server_default=sa.text("now()"),    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),

def downgrade() -> None:

    """Downgrade schema."""            onupdate=sa.text("now()"),    sa.Column('lsad', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    op.drop_table("operator_venues")

        ),    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    op.drop_index("ix_footsteps_created_at_desc", table_name="footsteps")

    op.drop_table("footsteps")        sa.Column("coordinates", sa.String(), nullable=False, server_default="POINT(0 0)"),    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),



    op.drop_table("followers")        sa.Column("area", sa.String(), nullable=True, server_default="POLYGON((0 0,0 0,0 0,0 0))"),    sa.Column('aland', sa.BIGINT(), autoincrement=False, nullable=True),



    op.drop_table("venues")        sa.Column("name", sa.String(), nullable=False),    sa.Column('awater', sa.BIGINT(), autoincrement=False, nullable=True),



    op.drop_index("ix_users_email", table_name="users")        sa.Column("description", sa.String(), nullable=True),    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),

    op.drop_table("users")

        sa.Column("address", sa.String(), nullable=True),    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),

    op.drop_index("ix_operators_email", table_name="operators")

    op.drop_table("operators")        sa.Column("city", sa.String(), nullable=True),    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),



    bind = op.get_bind()        sa.Column("state", sa.String(), nullable=True),    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),

    sa.Enum("PENDING", "ACCEPTED", "REJECTED", name="statusenum").drop(bind, checkfirst=True)

    sa.Enum("OWNER", "STAFF", name="operatorrole").drop(bind, checkfirst=True)        sa.Column("area_code", sa.String(), nullable=True),    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),


        sa.Column("country", sa.String(), nullable=True),    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),

        sa.Column("website", sa.String(), nullable=True),    sa.PrimaryKeyConstraint('statefp', name=op.f('pk_tiger_state')),

        sa.Column("phone_number", sa.String(), nullable=True),    sa.UniqueConstraint('gid', name=op.f('uidx_tiger_state_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False),

        sa.Column("email", postgresql.CITEXT(), nullable=True),    sa.UniqueConstraint('stusps', name=op.f('uidx_tiger_state_stusps'), postgresql_include=[], postgresql_nulls_not_distinct=False)

        sa.Column("capacity", sa.Integer(), nullable=True),    )

        sa.Column("indoor", sa.Boolean(), nullable=True),    op.create_index(op.f('idx_tiger_state_the_geom_gist'), 'state', ['the_geom'], unique=False, postgresql_using='gist')

        sa.Column("outdoor", sa.Boolean(), nullable=True),    op.create_table('spatial_ref_sys',

        sa.Column("parking_available", sa.Boolean(), nullable=True),    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),

        sa.Column("wheelchair_accessible", sa.Boolean(), nullable=True),    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),

        sa.Column("vip_area", sa.Boolean(), nullable=True),    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),

        sa.Column("age_restriction", sa.Integer(), nullable=True),    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),

        sa.Column("smoking_allowed", sa.Boolean(), nullable=True),    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),

        sa.Column("alcohol_served", sa.Boolean(), nullable=True),    sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),

        sa.Column("food_served", sa.Boolean(), nullable=True),    sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))

        sa.Column("live_music", sa.Boolean(), nullable=True),    )

        sa.Column("dance_floor", sa.Boolean(), nullable=True),    op.create_table('faces',

        sa.Column("dress_code", sa.String(), nullable=True),    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),

        sa.Column("opening_hours", sa.String(), nullable=True),    sa.Column('tfid', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True),

        sa.Column("tags", sa.String(), nullable=True),    sa.Column('statefp00', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column("rating", sa.Float(), nullable=True),    sa.Column('countyfp00', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

        sa.Column("number_of_reviews", sa.Integer(), nullable=True),    sa.Column('tractce00', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

        sa.Column("price_range", sa.String(), nullable=True),    sa.Column('blkgrpce00', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.Column("owner_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.Column('blockce00', sa.VARCHAR(length=4), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('cousubfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            "is_active",    sa.Column('submcdfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            sa.Boolean(),    sa.Column('conctyfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('placefp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            server_default=sa.text("true"),    sa.Column('aiannhfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        ),    sa.Column('aiannhce00', sa.VARCHAR(length=4), autoincrement=False, nullable=True),

        sa.Column("is_verified", sa.Boolean(), nullable=True),    sa.Column('comptyp00', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.Column("verification_date", sa.DateTime(timezone=True), nullable=True),    sa.Column('trsubfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column("verified_by", postgresql.UUID(as_uuid=True), nullable=True),    sa.Column('trsubce00', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

        sa.Column("experience_points", sa.Integer(), nullable=False, server_default="0"),    sa.Column('anrcfp00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column("photo_url", sa.String(), nullable=True, server_default=""),    sa.Column('elsdlea00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    )    sa.Column('scsdlea00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    sa.Column('unsdlea00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    op.create_table(    sa.Column('uace00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        "followers",    sa.Column('cd108fp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),    sa.Column('sldust00', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('sldlst00', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

            "created_at",    sa.Column('vtdst00', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

            sa.DateTime(timezone=True),    sa.Column('zcta5ce00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('tazce00', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

            server_default=sa.text("now()"),    sa.Column('ugace00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        ),    sa.Column('puma5ce00', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

            "updated_at",    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

            sa.DateTime(timezone=True),    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('blkgrpce', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

            server_default=sa.text("now()"),    sa.Column('blockce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),

            onupdate=sa.text("now()"),    sa.Column('cousubfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        ),    sa.Column('submcdfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('conctyfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            "status",    sa.Column('placefp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            sa.Enum("PENDING", "ACCEPTED", "REJECTED", name="statusenum"),    sa.Column('aiannhfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('aiannhce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),

            server_default="PENDING",    sa.Column('comptyp', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        ),    sa.Column('trsubfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column("follower_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.Column('trsubce', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

        sa.Column("followed_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.Column('anrcfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.ForeignKeyConstraint(["followed_id"], ["users.id"], ondelete="CASCADE"),    sa.Column('ttractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

        sa.ForeignKeyConstraint(["follower_id"], ["users.id"], ondelete="CASCADE"),    sa.Column('tblkgpce', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.PrimaryKeyConstraint("id", "follower_id", "followed_id", name=op.f("pk_followers")),    sa.Column('elsdlea', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    )    sa.Column('scsdlea', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    sa.Column('unsdlea', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    op.create_table(    sa.Column('uace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        "footsteps",    sa.Column('cd111fp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True),    sa.Column('sldust', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('sldlst', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

            "created_at",    sa.Column('vtdst', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

            sa.DateTime(timezone=True),    sa.Column('zcta5ce', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('tazce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

            server_default=sa.text("now()"),    sa.Column('ugace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        ),    sa.Column('puma5ce', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        sa.Column(    sa.Column('csafp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

            "updated_at",    sa.Column('cbsafp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            sa.DateTime(timezone=True),    sa.Column('metdivfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            nullable=False,    sa.Column('cnectafp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

            server_default=sa.text("now()"),    sa.Column('nectafp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

            onupdate=sa.text("now()"),    sa.Column('nctadvfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

        ),    sa.Column('lwflag', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.Column("coordinates", sa.String(), nullable=False),    sa.Column('offset', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.Column('atotal', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),

        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),

    )    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),

    op.create_index(    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),

        "ix_footsteps_created_at_desc",    sa.Column('tractce20', sa.VARCHAR(length=6), autoincrement=False, nullable=True),

        "footsteps",    sa.Column('blkgrpce20', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

        [sa.text("created_at DESC")],    sa.Column('blockce20', sa.VARCHAR(length=4), autoincrement=False, nullable=True),

    )    sa.Column('countyfp20', sa.VARCHAR(length=3), autoincrement=False, nullable=True),

    sa.Column('statefp20', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    op.create_table(    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),

        "operator_venues",    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),

        sa.Column("operator_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),

        sa.Column("venue_id", postgresql.UUID(as_uuid=True), nullable=False),    sa.PrimaryKeyConstraint('gid', name=op.f('faces_pkey'))

        sa.ForeignKeyConstraint(["operator_id"], ["operators.id"], ondelete="CASCADE"),    )

        sa.ForeignKeyConstraint(["venue_id"], ["venues.id"], ondelete="CASCADE"),    op.create_index(op.f('tiger_faces_the_geom_gist'), 'faces', ['the_geom'], unique=False, postgresql_using='gist')

        sa.PrimaryKeyConstraint("operator_id", "venue_id", name=op.f("pk_operator_venues")),    op.create_index(op.f('idx_tiger_faces_tfid'), 'faces', ['tfid'], unique=False)

    )    op.create_index(op.f('idx_tiger_faces_countyfp'), 'faces', ['countyfp'], unique=False)

    op.create_table('place',

    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),

def downgrade() -> None:    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    """Downgrade schema."""    sa.Column('placefp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    op.drop_table("operator_venues")    sa.Column('placens', sa.VARCHAR(length=8), autoincrement=False, nullable=True),

    sa.Column('plcidfp', sa.VARCHAR(length=7), autoincrement=False, nullable=False),

    op.drop_index("ix_footsteps_created_at_desc", table_name="footsteps")    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),

    op.drop_table("footsteps")    sa.Column('namelsad', sa.VARCHAR(length=100), autoincrement=False, nullable=True),

    sa.Column('lsad', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    op.drop_table("followers")    sa.Column('classfp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),

    sa.Column('cpi', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

    op.drop_table("venues")    sa.Column('pcicbsa', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

    sa.Column('pcinecta', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

    op.drop_index("ix_users_email", table_name="users")    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),

    op.drop_table("users")    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),

    sa.Column('aland', sa.BIGINT(), autoincrement=False, nullable=True),

    op.drop_index("ix_operators_email", table_name="operators")    sa.Column('awater', sa.BIGINT(), autoincrement=False, nullable=True),

    op.drop_table("operators")    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),

    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),

    bind = op.get_bind()    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),

    sa.Enum("PENDING", "ACCEPTED", "REJECTED", name="statusenum").drop(bind, checkfirst=True)    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),

    sa.Enum("OWNER", "STAFF", name="operatorrole").drop(bind, checkfirst=True)    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),

    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),
    sa.PrimaryKeyConstraint('plcidfp', name=op.f('place_pkey')),
    sa.UniqueConstraint('gid', name=op.f('uidx_tiger_place_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('tiger_place_the_geom_gist'), 'place', ['the_geom'], unique=False, postgresql_using='gist')
    op.create_table('state_lookup',
    sa.Column('st_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('abbrev', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.CHAR(length=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('st_code', name=op.f('state_lookup_pkey')),
    sa.UniqueConstraint('abbrev', name=op.f('state_lookup_abbrev_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', name=op.f('state_lookup_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('statefp', name=op.f('state_lookup_statefp_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('street_type_lookup',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('abbrev', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_hw', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('street_type_lookup_pkey'))
    )
    op.create_index(op.f('street_type_lookup_abbrev_idx'), 'street_type_lookup', ['abbrev'], unique=False)
    op.create_table('tract',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('tract_id', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('namelsad', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('tract_id', name=op.f('tract_pkey'))
    )
    op.create_table('zip_state_loc',
    sa.Column('zip', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('stusps', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('place', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('zip', 'stusps', 'place', name=op.f('zip_state_loc_pkey'))
    )
    op.create_table('pagc_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('rule', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pagc_rules_pkey'))
    )
    op.create_table('featnames',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tlid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('fullname', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('predirabrv', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('pretypabrv', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('prequalabr', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('sufdirabrv', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('suftypabrv', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sufqualabr', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('predir', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('pretyp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('prequal', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('sufdir', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('suftyp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('sufqual', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('linearid', sa.VARCHAR(length=22), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('paflag', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('gid', name=op.f('featnames_pkey'))
    )
    op.create_index(op.f('idx_tiger_featnames_tlid_statefp'), 'featnames', ['tlid', 'statefp'], unique=False)
    op.create_index(op.f('idx_tiger_featnames_snd_name'), 'featnames', [sa.literal_column('soundex(name::text)')], unique=False)
    op.create_index(op.f('idx_tiger_featnames_lname'), 'featnames', [sa.literal_column('lower(name::text)')], unique=False)
    op.create_table('pagc_lex',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seq', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('word', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stdword', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pagc_lex_pkey'))
    )
    op.create_table('loader_variables',
    sa.Column('tiger_year', sa.VARCHAR(length=4), autoincrement=False, nullable=False),
    sa.Column('website_root', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('staging_fold', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('staging_schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('tiger_year', name=op.f('loader_variables_pkey'))
    )
    op.create_table('pagc_gaz',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seq', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('word', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stdword', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_custom', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pagc_gaz_pkey'))
    )
    op.create_table('zip_lookup',
    sa.Column('zip', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('st_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('co_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('county', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('cs_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cousub', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('pl_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('place', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('zip', name=op.f('zip_lookup_pkey'))
    )
    op.create_table('bg',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blkgrpce', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('bg_id', sa.VARCHAR(length=12), autoincrement=False, nullable=False),
    sa.Column('namelsad', sa.VARCHAR(length=13), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('bg_id', name=op.f('bg_pkey')),
    comment='block groups'
    )
    op.create_table('topology',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('precision', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('hasz', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('topology_pkey')),
    sa.UniqueConstraint('name', name=op.f('topology_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('county',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('countyns', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('cntyidfp', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('namelsad', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('lsad', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('classfp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('csafp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('cbsafp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('metdivfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('cntyidfp', name=op.f('pk_tiger_county')),
    sa.UniqueConstraint('gid', name=op.f('uidx_county_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_tiger_county'), 'county', ['countyfp'], unique=False)
    op.create_table('tabblock20',
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blockce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('geoid', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('ur', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('uace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('uatype', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('housing', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('geoid', name=op.f('pk_tabblock20'))
    )
    op.create_table('geocode_settings_default',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('setting', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('short_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('geocode_settings_default_pkey'))
    )
    op.create_table('cousub',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('cousubfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('cousubns', sa.VARCHAR(length=8), autoincrement=False, nullable=True),
    sa.Column('cosbidfp', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('namelsad', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('lsad', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('classfp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('cnectafp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('nectafp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('nctadvfp', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.NUMERIC(precision=14, scale=0), autoincrement=False, nullable=True),
    sa.Column('awater', sa.NUMERIC(precision=14, scale=0), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_the_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_the_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_the_geom')),
    sa.PrimaryKeyConstraint('cosbidfp', name=op.f('cousub_pkey')),
    sa.UniqueConstraint('gid', name=op.f('uidx_cousub_gid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('tige_cousub_the_geom_gist'), 'cousub', ['the_geom'], unique=False, postgresql_using='gist')
    op.create_table('addr',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tlid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('fromhn', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('tohn', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('side', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('zip', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('plus4', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('fromtyp', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('totyp', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('fromarmid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('toarmid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('arid', sa.VARCHAR(length=22), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('gid', name=op.f('addr_pkey'))
    )
    op.create_index(op.f('idx_tiger_addr_zip'), 'addr', ['zip'], unique=False)
    op.create_index(op.f('idx_tiger_addr_tlid_statefp'), 'addr', ['tlid', 'statefp'], unique=False)
    op.create_table('zip_lookup_all',
    sa.Column('zip', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('st_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('co_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('county', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('cs_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cousub', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('pl_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('place', sa.VARCHAR(length=90), autoincrement=False, nullable=True),
    sa.Column('cnt', sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_table('tabblock',
    sa.Column('gid', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statefp', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('countyfp', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tractce', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('blockce', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('tabblock_id', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mtfcc', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('ur', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('uace', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('funcstat', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('aland', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('awater', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('intptlat', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('intptlon', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('the_geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.CheckConstraint("geometrytype(the_geom) = 'MULTIPOLYGON'::text OR the_geom IS NULL", name=op.f('enforce_geotype_geom')),
    sa.CheckConstraint('st_ndims(the_geom) = 2', name=op.f('enforce_dims_geom')),
    sa.CheckConstraint('st_srid(the_geom) = 4269', name=op.f('enforce_srid_geom')),
    sa.PrimaryKeyConstraint('tabblock_id', name=op.f('tabblock_pkey'))
    )
    op.create_table('loader_lookuptables',
    sa.Column('process_order', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=False),
    sa.Column('lookup_name', sa.TEXT(), autoincrement=False, nullable=False, comment='This is the table name to inherit from and suffix of resulting output table -- how the table will be named --  edges here would mean -- ma_edges , pa_edges etc. except in the case of national tables. national level tables have no prefix'),
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=True, comment='suffix of the tables to load e.g.  edges would load all tables like *edges.dbf(shp)  -- so tl_2010_42129_edges.dbf .  '),
    sa.Column('single_mode', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('load', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment="Whether or not to load the table.  For states and zcta5 (you may just want to download states10, zcta510 nationwide file manually) load your own into a single table that inherits from tiger.states, tiger.zcta5.  You'll get improved performance for some geocoding cases."),
    sa.Column('level_county', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('level_state', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('level_nation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='These are tables that contain all data for the whole US so there is just a single file'),
    sa.Column('post_load_process', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('single_geom_mode', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('insert_mode', sa.CHAR(length=1), server_default=sa.text("'c'::bpchar"), autoincrement=False, nullable=False),
    sa.Column('pre_load_process', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('columns_exclude', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='List of columns to exclude as an array. This is excluded from both input table and output table and rest of columns remaining are assumed to be in same order in both tables. gid, geoid,cpi,suffix1ce are excluded if no columns are specified.'),
    sa.Column('website_root_override', sa.TEXT(), autoincrement=False, nullable=True, comment='Path to use for wget instead of that specified in year table.  Needed currently for zcta where they release that only for 2000 and 2010'),
    sa.PrimaryKeyConstraint('lookup_name', name=op.f('loader_lookuptables_pkey'))
    )
    op.create_table('direction_lookup',
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('abbrev', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('direction_lookup_pkey'))
    )
    op.create_index(op.f('direction_lookup_abbrev_idx'), 'direction_lookup', ['abbrev'], unique=False)
    op.drop_table('operator_venues')
    op.drop_index('ix_footsteps_created_at_desc', table_name='footsteps')
    op.drop_table('footsteps')
    op.drop_table('followers')
    op.drop_table('venues')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_operators_email'), table_name='operators')
    op.drop_table('operators')
    # ### end Alembic commands ###
    op.execute("DROP EXTENSION IF EXISTS age")
    op.execute("DROP EXTENSION IF EXISTS postgis")
    bind = op.get_bind()
    status_enum = sa.Enum(name='statusenum')
    status_enum.drop(bind, checkfirst=True)
    operator_role_enum = sa.Enum(name='operatorrole')
    operator_role_enum.drop(bind, checkfirst=True)  

